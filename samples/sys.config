%%% -*- mode:erlang -*-
%%% Warning - this config file *must* end with <dot><whitespace>
[

%%% WARNING: В ближайшее время, данная секция прекратит существование.
%%%          Все окончательно переедет в кокон /cluster/CORECLUSTERID/cp/property
 {core_dc, []},

 {mycelium_client,
  [
   {realms,
    [
     %{
     %    RealmName :: atom(),
     %    vhost :: a_str8(),
     %    User,
     %    Pass,
     %    Amount of connections for use,
     %    [
     %        {
     %            ConnectionName :: atom(),
     %            {host, Host :: string()} | {ip4, Ip :: string()} | {ip6, Ip::string()},
     %            Port :: integer() | undefined,
     %            HeartbeatTimeout :: integer() | undefined
     %        }
     %    ]
     %}
     {ds_realm,   "/ssw", "ssw", "ssw", 4, [
                                            {ds_1l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                            {ds_2l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                            {ds_3l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                            {ds_4l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                            {ds_1r, 8, {host, "remote.broker.ecss"}, 5673, 2},
                                            {ds_2r, 8, {host, "remote.broker.ecss"}, 5673, 2},
                                            {ds_3r, 8, {host, "remote.broker.ecss"}, 5673, 2},
                                            {ds_4r, 8, {host, "remote.broker.ecss"}, 5673, 2}
                                           ]},
     {tring_realm,   "/ssw", "ssw", "ssw", 1, [
                                               {tring_1l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                               {tring_1r, 8, {host, "remote.broker.ecss"}, 5673, 2}
                                              ]},
     {rps_realm,   "/ssw", "ssw", "ssw", 4, [  %% Тут трафик незначительный
                                               {rps_1l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                               {rps_2l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                               %{rps_3l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                               %{rps_4l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                               {rps_1r, 8, {host, "remote.broker.ecss"}, 5673, 2},
                                               {rps_2r, 8, {host, "remote.broker.ecss"}, 5673, 2}
                                               %{rps_3r, 8, {host, "remote.broker.ecss"}, 5672, 2},
                                               %{rps_4r, 8, {host, "remote.broker.ecss"}, 5672, 2}
                                              ]},
     {core_realm, "/ssw", "ssw", "ssw", 4, [
                                            {core_1l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                            {core_2l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                            {core_3l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                            {core_4l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                            {core_1r, 8, {host, "remote.broker.ecss"}, 5673, 2},
                                            {core_2r, 8, {host, "remote.broker.ecss"}, 5673, 2},
                                            {core_3r, 8, {host, "remote.broker.ecss"}, 5673, 2},
                                            {core_4r, 8, {host, "remote.broker.ecss"}, 5673, 2}
                                           ]},
     {cocon_realm, "/ssw", "ssw", "ssw", 1, [
                                             {cocon_1l, 9, {host, "local.broker.ecss"}, 5672, 2},
                                             {cocon_1r, 8, {host, "remote.broker.ecss"}, 5673, 2}
                                            ]}
    ]
   }
  ]
 },

 {ecss_tring, [{realm, tring_realm}]},

 % Только для запуска из консоли. Если запускаем через сервис, необходимо ипользовать дефолтные параметры.
 {ecss_env, [{pid_file_root, "/var/lib/ecss/pid"}]},

 {cocon, [
    {realm, cocon_realm},
    {heartbeat, 2000},

    {user_data, mysql},
    {audit, mysql},

    {mysql_server_ip, "cocon.mysql.ecss"},
    {mysql_server_port, undefined},
    {mysql_username, "audit"},
    {mysql_password, "audit"},
    {mysql_db, "ecss_audit"}
  ]},

 {rtop_agent, [
               {cluster, "core1"},
               {role, core},
               {realm, ds_realm}
              ]},

 {rtopdds,    [
               {buscount, 10}  %% Количество сессий для связи с DS. По коннециям описанным в rtop_agent
              ]},

  {n2o,
   [
    {port,8000},
    {transition_port, 8000},
    {route,tc_web_routes},
    {log_modules,tc_web_index}
   ]},

 {ecss_teleconference, [
    {domain, "p.city"},
    {rest_ip, "localhost"},
    {mysql, [
        {enabled, true},
        {user, "db_history"},
        {password, "db_history"},
        {host, "tc.mysql.ecss"},
        {port, 3306},
        {database, "history_db"}
    ]}
 ]},

 {oasys,
  [
   {cluster_timeout, 60000}  %% Таймаут репликаций данных кластеров.
  ]},

 {rps,
  [
   {realm, rps_realm}
  ]},

 {rps_agent, [
              {alarms, off},
              {statistics, off},
              {events, off},
              {logs, off},
              {controls, off}
             ]},

 {sasl, [
         {sasl_error_logger, false}
        ]
 },

 {kernel,
  [
   {net_ticktime, 3},
   {inet_dist_listen_min, 1100},
   {inet_dist_listen_max, 1200},
   {error_logger, silent},
   {shutdown_func, {chronica_application_shutdown_handler, handle_shutdown}}
  ]
 },

 {chronica,
  [
   % Format:
   %   {chronica, [
   %       Rules,
   %       Flows,
   %       Formats,
   %       InternalLogger,
   %       InternalLoggerFilename,
   %       LogRoot,
   %       MaxFileSize,
   %       MaxFileNum,
   %       LogIfacePath,
   %   ]}
   %
   %   Rules = {rules, [Rule]}
   %   Rule = {ModuleNameFilter, [Property]}
   %   ModuleNameFilter = atom() % use * and ?
   %   Property = {priority, PriorityValue} | {flow, FlowName} % both properties are mandatory
   %   PriorityValue = nothing | error | warning | info | trace | debug
   %   Flows = {flows, [Flow]}
   %   Flow = {FlowName, [Output]}
   %   FlowName = atom()
   %   Output = tty | {tty, FormatName} | {file, Name} | {file, Name, FormatName} | {udp, {IP, Port}} | {udp, {IP, Port}, FormatName}
   %   Formats = {formats, [Format]},
   %   Format = {FormatName, FormatString},
   %   FormatName = atom(),
   %   FormatString = string(),
   %   InternalLogger = {internal_logger, [ILOption]}
   %   ILOption = file | debug % file - write log to file, debug - turn on debug
   %   InternalLoggerFilename = {internal_logger_filename, Name}
   %   Name = string()
   %   LogRoot = {log_root, DirFormat}
   %   DirFormat = string() % use <Node> <Year> <Month> <Day> <Hour> <Minute> <Second> in string
   %   MaxFileSize = {max_file_size, number()}
   %   MaxFileNum = {max_file_num, number()}

   {rules,
    [
     {all_errors, "*",                                  error, [errors, screen], on}, % catch all errors

     % Teleconference
     {all_tc,      "tc_*",                              debug, [default],        off},
     {default,     "*&!mycelium*&!tts*",                debug, [default],        off},
     {default_bin, "*&!mycelium*&!tts*",                debug, [default_bin],    off},
     {default2,    "*&!fun_trace*&!mycelium*&!tts*",	debug, [default],        off},
     {all_info,    "*&!error_logger",                   info,  [info],           on}, % catch all infos
     {all_info_bin,"*",                                 info,  [info_bin],       off}, % catch all infos
     {all_logs,    "*",                                 debug, [total_bin],      off}, % catch all logs include amqp
     {amqp_bin,    "mycelium*",                         debug, [amqp_bin],       off},
     {cph,         "cph_*",                             debug, [screen],         off},
     {setup_req,   "setup_req",                         debug, [debug_bin],      off},
     {rm,          "rm_agent*",                         debug, [rm],             off},
     {rm_bin,      "rm_agent*",                         debug, [rm_bin],         off},

     {rtopdds,     "rtopdds_bus_server",                debug, [rtop],           off},
     {rtopdds_bin, "rtopdds_bus_server",                debug, [rtop_bin],       off},

     {mysql,       "mysql*",                            debug, [mysql],          off},
     {mysql_bin,   "mysql*",                            debug, [mysql_bin],      off},

     %% CallProcess
     {ih,          "ct_ffsm_ih*",                       debug, [screen],         off},
     {gen_cp,      "gen_cp*",                           debug, [screen],         off},
     {cpt_screen,  "cpt_*|oct_cp*",                     debug, [screen],         off},
     {cpt,         "cpt_*|oct_cp*|fun_trace_cpt_*",     debug, [cpt],            off},
     {cp_stfin,    "oct_rr_cp_start*|oct_rr_cp_final*", debug, [screen],         off},

     {cn_all,      "oct_rr_cn|ss_cn*",                                         debug, [cn_bin],     off},
     {notifier,    "informer*|jabber*|email_notifier*|ecss_notifier*|domain*", debug, [cn, screen], off},
     {notifier_all,"informer*|jabber*|email_notifier*|ecss_notifier*|domain*", debug, [cn_bin],     off},

     %% Сервисы
     %% Core Trike Services
     {trike,	    "trike*",				debug,	[trike, screen],	off},
     {trike_bin,	"trike*",				debug,	[trike_bin],	off},
     {core_trike_cp,		  "ct_*&!ct_amqp_io*&!ct_service_amqp_io*",	debug,	[core_trike, screen], off},
     {core_trike_cp_bin,	"ct_*&!ct_amqp_io*&!ct_service_amqp_io*",	debug,	[core_trike_bin], off},
     {trike_dba_bin, "trike_mysql_adapter*", debug, [trike_dba_bin], off},

     %% TTS
     {ct_trike_tts_bin,           "ct_trike_tts*", debug,  [trike_tts_bin], off},
     {ct_trike_actual_calls_bin,  "ct_trike_actual_calls*",       debug,  [trike_tts_bin], off},

     %% CP
     {core_trike_cp_trace,  "ct_service_cp*", debug,  [screen], off},
     {core_trike_cp_trace_bin,  "ct_service_cp*", debug,  [core_trike_bin], off},
     {core_trike_amqp,		"ct_service_amqp_io*|ct_amqp_io*",		debug,	[core_trike_amqp, screen], off},
     {core_trike_amqp_bin,	"ct_service_amqp_io*|ct_amqp_io*",		debug,	[core_trike_amqp_bin], off},

     %% MGM
     {mgm_oct,     "oct_rr_mgm",                        debug, [mgm, screen],    off},
     {mgm_ss,      "ss_mgm*",                           debug, [mgm, screen],    off},
     {mgm_all,     "oct_rr_mgm|ss_mgm*",                debug, [mgm_bin],        off},
     %% Alarm
     {alarm_oct,   "oct_rr_alarm",                      debug, [alarm, screen],  off},
     {alarm_ss,    "ss_alarm*",                         debug, [alarm, screen],  off},
     {alarm_all,   "oct_rr_alarm|ss_alarm*",            debug, [alarm_bin],      off},
     %% Pickup
     {pickup_oct,  "oct_rr_pickup",                     debug, [pickup, screen], off},
     {pickup_ss,   "ss_pickup*",                        debug, [pickup, screen], off},
     {pickup_all,  "oct_rr_pickup|ct_pickup_*|ss_pickup*", debug, [pickup_bin],  off},
     {pickup_ct,   "ct_pickup_*",                       debug, [pickup, screen],  off},
     % CGG
     {cgg_oct,     "oct_rr_cgg",	                    debug, [cgg, screen],    off},
     {cgg_ss,      "ss_cgg*",		                    debug, [cgg, screen],    off},
     {cgg_all,     "oct_rr_cgg|ss_cgg*",	            debug, [cgg_bin],        off},
     % CF
     {cf_oct,      "oct_rr_cf",		                    debug, [cf, screen],     off},
     {cfc_oct,     "oct_rr_cfc",	                    debug, [cf, screen],     off},
     {cf_ss,       "ss_cf*&!ss_cfc*",                   debug, [cf, screen],     off},
     {cfc_ss,      "ss_cfc*",                           debug, [cf, screen],     off},
     {cf_all,      "oct_rr_cf|ss_cf*&!ss_cfc*",         debug, [cf_bin],         off},
     {cfc_all,     "oct_rr_cfc|ss_cfc*",                debug, [cf_bin],         off},
     % Direction manager
     {direction_manager,     "ct_service_direction_manager*", debug, [screen, trunks], off},
     {direction_manager_bin, "ct_service_direction_manager*", debug, [trunks_bin], off},
     % Trunk manager
     {trunk_manager,     "ct_service_trunk_manager*", debug, [screen, trunks], off},
     {trunk_manager_bin, "ct_service_trunk_manager*", debug, [trunks_bin], off},
     % RBP
     {rbp_oct,     "oct_rr_rbp",		                debug, [rbp, screen],    off},
     {rbp_ss,      "ss_rbp*", 		                    debug, [rbp, screen],    off},
     {rbp_all,     "oct_rr_rbp|ss_rbp*", 		        debug, [rbp_bin],        off},
     % Park
     {park_oct,    "oct_rr_park*",                      debug, [park, screen],    off},
     {park_ss,     "ss_park*",                          debug, [park, screen],    off},
     {park_all,    "oct_rr_park*|ss_park*",             debug, [park_bin],       off},
     % MCID
     {mcid_oct,    "oct_rr_mcid",		                debug, [mcid, screen],   off},
     {mcid_ss,     "ss_mcid*", 		                    debug, [mcid, screen],   off},
     {mcid_all,    "oct_rr_mcid|ss_mcid*", 		        debug, [mcid_bin],       off},
     % CallBack
     {callback_oct,"oct_rr_callback",		            debug, [rbp, screen],    off},
     {callback_ss, "ss_callback*", 		                debug, [callback, screen],off},
     {callback_all,"oct_rr_callback|ss_callback*", 		debug, [callback_bin],   off},
     % Leg
     {ct_leg,      "ct_ffsm_leg*", debug, [default, screen], off},
     %% MSR Connector for control channel
     {trike_cc_msr_connector,     "trike_cc_rr_service*",          debug, [trike_cc_msr_connector, screen], off},
     {trike_cc_msr_connector_bin, "trike_cc_rr_service*",          debug, [trike_cc_msr_connector_bin, screen], off},
     %% Control channel
     {ecss_control_channel,     "ecss_control_channel_*",        debug, [ecss_control_channel, screen], off},
     {ecss_control_channel_bin, "ecss_control_channel_*",        debug, [ecss_control_channel_bin], off},
     % MediaProxy
     {media_proxy,     "oct_rr_media_proxy_*",        debug, [media_proxy, screen], off},
     {media_proxy_bin, "oct_rr_media_proxy_*",        debug, [media_proxy_bin], off},
     {core_trike_adapter,     "ct_core_trike_adapter*",        debug, [core_trike_adapter, screen], off},
     {core_trike_adapter_bin, "ct_core_trike_adapter*",        debug, [core_trike_adapter_bin], off},

     % Ivr Adapter
     {core_trike_ivr_adapter,     "ct_service_ivr_adapt*",        debug, [core_trike_service_ivr_adapter, screen], off},

     % ivr
     {appgw,             "appgw*",        debug, [ivr, screen], off},
     {ivr_processor,     "ivr*",          debug, [ivr, screen], off},

     % MediaResyncer
     {media_resyncer_oct,"oct_rr_media_resyncer_*",     debug, [media_resyncer, screen],    off},
     {media_resyncer_ss, "ss_media_resyncer*", 		    debug, [media_resyncer, screen],off},
     {media_resyncer_all,"oct_rr_media_resyncer_*|ss_media_resyncer*", 		debug, [media_resyncer_bin],   off},
     % CN
     {cn_oct,      "oct_rr_cn|oct_call_notifier",	    debug, [cn, screen],     off},
     {cn_ss,       "ss_cn*", 		                    debug, [cn, screen],     off},
     {cn_all,      "oct_rr_cn|oct_call_notifier|ss_cn*", debug, [cn_bin],         off},
     % CFC
     {cfc_oct,     "oct_rr_cfc",		                debug, [cfc, screen],    off},
     {cfc_ss,      "ss_cfc*", 		                    debug, [cfc, screen],    off},
     {cfc_all,     "oct_rr_cfc|ss_cfc*", 		        debug, [cfc_bin],        off},
     % AutoRedial
     {autoredial_oct,     "oct_rr_autoredial",          debug, [autoredial, screen],    off},
     {autoredial_ss,      "ss_autoredial*",             debug, [autoredial, screen],    off},
     {autoredial_all,     "oct_rr_autoredial|ss_autoredial*",  debug, [autoredial_bin], off},
     % AAA
     {aaa_oct,     "oct_rr_aaa_*",		                debug, [aaa, screen],    off},
     {aaa_ss,      "aaa_*", 		                    debug, [aaa, screen],    off},
     {aaa_all,     "oct_rr_aaa_*|aaa_*|ct_aaa_*",       debug, [aaa_bin],        off},
     {aaa_ct,      "ct_aaa_*",                          debug, [aaa, screen],    off},
     % CHUNT
     {chunt_oct,   "oct_rr_chunt",		                debug, [chunt, screen],  off},
     {chunt_ss,    "ss_chunt*",		                    debug, [chunt, screen],  off},
     {chunt_all,   "oct_rr_chunt|ss_chunt*",	        debug, [chunt_bin],      off},
     % Bridge adaper
     {bridge_oct,  "oct_rr_bridge",		                debug, [ba, screen],     off},
     {bridge_ss,   "ss_bridge*",		                debug, [ba, screen],     off},
     {bridge_ba,   "ba_*",                              debug, [ba, screen],     off},
     {bridge_all,  "oct_rr_bridge|ss_bridge*|ba_*",	    debug, [ba_bin],         off},
     % Simple proxy
     {simple_proxy_all, "oct_simple_proxy_ffsm|oct_t_o_proxy_ffsm",	debug, [chunt, pickup, cgg, screen], off},
     {t_o_proxy_all,    "oct_t_o_proxy_ffsm",                       debug, [chunt, pickup, cgg, screen], off},
     % SORM
     {sorm_rtp,    "oct_rr_sormrtpp",	                debug, [sorm, screen],   off},
     {sorm_rtp_api,"api_rtp_proxy",		                debug, [sorm, screen],   off},
     {sorm_oct,    "oct_rr_sorm",		                debug, [sorm, screen],   off},
     {sorm_worker, "sorm_worker",		                debug, [sorm, screen],   off},
     {sorm_cp,     "sorm_cp",   		                debug, [sorm, screen],   off},
     {sorm_csorm,  "csorm_*",		                    debug, [sorm, screen],   off},
     {sorm_all,    "oct_rr_sorm|csorm_*|sorm_*",	    debug, [sorm_bin],       off},
     %% Мультисервис
     {ms_all,      "oct_rr_multiservice*|ss_ms*", debug, [multiservice],   off},
     {ms_ss,       "oct_rr_cw*|ct_ffsm_ss*|ss_ms*", debug,  [screen, multiservice], off},
     {ajuster,     "oct_rr_sdp_ajuster*", debug,  [ajuster], off},
     {info_screen, "*&!version_info&!error_logger&!watchdog&!tts*", info, [screen], off}, % catch all errors
     {cocon_trike_trace_cmd, "cocon_trike_trace_cmd*",      debug, [screen, default], off}
    ]
   },
   {flows,
    [
     {trike_tts_bin, [{file, "ct_trike_tts.log.bin", binary}]},
     {trike_dba_bin, [{file, "trike_dba.log.bin", binary}]},
     {screen,        [{tty, short}]},
     {default,       [{file, "ssw.log"}]},
     {trike,          [{file, "core_trike.log"}]},
     {trike_bin,      [{file, "core_trike.bin", binary}]},
     {core_trike,     [{file, "core_trike.log"}]},
     {core_trike_bin, [{file, "core_trike.bin", binary}]},
     {core_trike_amqp,     [{file, "core_trike_amqp.log"}]},
     {core_trike_amqp_bin, [{file, "core_trike_amqp.bin", binary}]},
     {core_trike_service_ivr_adapter, [{file, "core_trike_service_ivr_adapter.log"}]},
     {trunks,     [{file, "trunks.log"}]},
     {trunks_bin, [{file, "trunks.bin", binary}]},
     {default_bin,   [{file, "ssw.log.bin", binary}]},
     {total_bin,     [{file, "ssw.total.log.bin", binary}]},
     {info,          [{file, "info.log"}]},
     {info_bin,      [{file, "info.log.bin", binary}]},
     {rtop,          [{file, "rtop.log"}]},
     {rtop_bin,      [{file, "rtop.log.bin", binary}]},
     {alarm,         [{file, "ss_alarm.log"}]},
     {alarm_bin,     [{file, "ss_alarm.log.bin", binary}]},
     {mysql,         [{file, "mysql.log"}]},
     {mysql_bin,     [{file, "mysql.log.bin", binary}]},
     {errors,        [{file, "errors.log"}]},
     {amqp_bin,      [{file, "amqp.log.bin", binary}]},
     {timer_server,  [{file, "timer_server.log"}]},
     {sorm,          [{file, "sorm.log"}]},
     {sorm_bin,      [{file, "sorm.log.bin", binary}]},
     {cp_bin,        [{file, "cp.log.bin", binary}]},
     {cpm,           [{file, "cpm.log"}]},
     {cpt,           [{file, "cpt.log"}]},
     {pickup,        [{file, "pickup.log"}]},
     {mgm,           [{file, "mgm.log"}]},
     {mgm_bin,       [{file, "mgm.log.bin", binary}]},
     {cgg,           [{file, "cgg.log"}]},
     {cf,            [{file, "cf.log"}]},
     {cf_bin,        [{file, "cf.log.bin", binary}]},
     {autoredial,    [{file, "autoredial.log"}]},
     {autoredial_bin,[{file, "autoredial.log.bin", binary}]},
     {rbp,           [{file, "rbp.log"}]},
     {rbp_bin,       [{file, "rbp.log.bin", binary}]},
     {park,          [{file, "park.log"}]},
     {park_bin,      [{file, "park.log.bin", binary}]},
     {ajuster,       [{file, "ajuster.log"}]},
     {mcid,          [{file, "mcid.log"}]},
     {mcid_bin,      [{file, "mcid.log.bin", binary}]},
     {callback,      [{file, "callback.log"}]},
     {callback_bin,  [{file, "callback.log.bin", binary}]},
     {media_resyncer,      [{file, "media_resyncer.log"}]},
     {media_resyncer_bin,  [{file, "media_resyncer.log.bin", binary}]},
     {trike_cc_msr_connector,         [{file, "trike_cc_msr_connector.log"}]},
     {trike_cc_msr_connector_bin,     [{file, "trike_cc_msr_connector.log.bin", binary}]},
     {ecss_control_channel,         [{file, "ecss_control_channel.log"}]},
     {ecss_control_channel_bin,     [{file, "ecss_control_channel.log.bin", binary}]},
     {media_proxy,         [{file, "media_proxy.log"}]},
     {media_proxy_bin,     [{file, "media_proxy.log.bin", binary}]},
     {media_park,          [{file, "media_park.log"}]},
     {media_park_bin,      [{file, "media_park.log.bin", binary}]},
     {core_trike_adapter,    [{file, "core_trike_adapter.log"}]},
     {core_trike_adapter_bin,[{file, "core_trike_adapter.log.bin", binary}]},
     {cn,            [{file, "cn.log"}]},
     {cn_bin,        [{file, "cn.log.bin", binary}]},
     {cfc,           [{file, "cfc.log"}]},
     {cfc_bin,       [{file, "cfc.log.bin", binary}]},
     {aaa,           [{file, "aaa.log"}]},
     {aaa_bin,       [{file, "aaa.log.bin", binary}]},
     {rm,            [{file, "rm.log"}]},
     {rm_bin,        [{file, "rm.log.bin", binary}]},
     {ba,            [{file, "ba.log"}]},
     {chunt,         [{file, "chunt.log"}]},
     {pickup_bin,    [{file, "pickup.log.bin", binary}]},
     {cgg_bin,       [{file, "cgg.log.bin", binary}]},
     {ba_bin,        [{file, "ba.log.bin", binary}]},
     {chunt_bin,     [{file, "chunt.log.bin", binary}]},
     {multiservice,  [{file, "multiservice.log"}]},
     {debug_bin,     [{file, "debug.log.bin", binary}]},
     {heartbeats,    [{file, "heartbeats.log"}]},
     {ivr,           [{file, "ivr.log"}]}
    ]
   },
   {formats,
    [
     % "%Id %Y-%M(%Ml)-%D %H:%Mi:%S:%Ms %PRIORITY %P %Priority %Pid %File %Line %Module %Function %Message %MessageLine"

     {default, "%Y-%M-%D %H:%Mi:%S:%Ms %PRIORITY %Pid [%Module:%Line]: %Message\n"},
     {short, "%Y-%M-%D %H:%Mi:%S:%Ms %P %Pid [%Module:%Line]: %Message\n"}
    ]
   },
   {active, true},
   {colored, true},
   {sync, false},
   {rotate_at_start, false},
   {file_check_timeout, 10000},
   {internal_logger, [{file, "chronica", {101048576, 1}, error}, {tty, error}]},
   {data_root, "/var/lib/ecss/chronica/cache/<Node>"},
   {log_root, "/var/log/ecss/core/<Year>_<Month>_<Day>_<Hour>_<Minute>_<Second>_<Node>"},
   {max_file_size, 104857600}, % 1Gb
   {max_file_num,  20},
   {debug, true},
   {debug_level, 2}
  ]
 },

{lager, [
    {log_root, "/var/log/ecss/core"},
    {colored, true},
    {error_logger_redirect, false},
    {handlers, [
        {lager_console_backend, error},
        {lager_file_backend, [{file, "error.log"}, {level, error}]},
        {lager_file_backend, [{file, "console.log"}, {level, error}]}
    ]}
]},

{nksip, [
    {local_data_path, "/tmp"}
]}

].
